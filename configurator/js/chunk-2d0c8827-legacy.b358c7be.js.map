{"version":3,"sources":["webpack:///./src/configurator/embedding/roomle-configurator-api.ts"],"names":["MessageHandler","side","incomingMessageBus","outgoingMessageBus","messageExecution","this","_outgoingMessageBus","_execMessage","_side","_incomingMessageBus","addEventListener","_handleMessage","bind","fun","message","args","Promise","resolve","reject","messageChannel","MessageChannel","port1","onmessage","event","data","close","port2","Error","response","JSON","parse","e","_prepareError","error","undefined","result","command","stringify","postMessage","receiver","ports","Array","isArray","length","execResult","then","console","NAMESPACE_SEPARATOR","HANDSHAKE_MESSAGES","REQUEST_BOOT","SETUP","WEBSITE_READY","getConfiguratorSettings","async","configuratorId","initData","server","customApiUrl","currentTenant","overrideTenant","url","apiKey","token","window","btoa","Date","toISOString","createHeaders","headers","locale","language","device","platform","Headers","request","Request","method","mode","cache","fetch","configurator","json","isInIframe","self","top","deepMergeCopy","obj1","obj2","deepMerge","p","constructor","Object","NAMES_FOR_LOCALHOST","getHostname","isIframe","location","href","document","referrer","hostname","URL","isDemoHostname","includes","endsWith","BROWSER_LANGUAGE_PROPERTY_KEYS_KNOWN","getLanguage","lang","navigator","substr","languages","i","CONFIGURATOR_IDLE","castAndFixInitData","castInitData","decodeURIComponent","emails","shareUrl","deeplink","replace","LEGACY_SHARE_PLACEHOLDER","SHARE_PLACEHOLDER","obj","keys","key","value","entry","mergeInitData","configuratorSettings","currentInitData","id","remoteInitData","settings","tenant","getFallbackInitData","fallbackInitData","isAndroid","test","userAgent","setDefaultBehaviour","object","callbackName","defaultBehaviour","customBehaviour","defineProperty","mute","warn","calcVh","innerHeight","setCustomProp","element","setTimeout","style","setProperty","RML_CUSTOM_PROPERTY_HEIGHT","RML_STYLES_ID","RML_ANIMATION_DELAY","RML_CSS_CLASSES","CONTAINER","FILL","POSITION","TRANSITION","ANDROID_HEIGHT","OVERFLOW_HIDDEN","globalSetupDone","Map","RoomleEmbeddingApi","container","waitForIframe","ui","callbacks","extended","analytics","_initData","has","stylesAlreadyAdded","getElementById","zIndex","styles","createElement","type","cssTransition","cssTransitionForAllBrowsers","reduce","acc","browser","vh","innerHTML","head","appendChild","_onResize","_container","_configuratorSettings","iframe","_createIframe","_onUseFullPage","_executeMessage","_onBackToWebsite","_messageHandler","_waitForIframe","_iframe","set","_create","featureFlags","realPartList","delete","querySelector","removeChild","removeEventListener","_a","useLocalRoomle","overrideServerUrl","src","classList","add","documentElement","body","remove","source","contentWindow","setOutgoingMessageBus","methods","forEach","namespaces","split","methodName","sendMessage","arguments","callback","callbacksName","eventName","messageNamespaces","namespace","objectOfAction","methodOfAction"],"mappings":"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","file":"js/chunk-2d0c8827-legacy.b358c7be.js","sourcesContent":["class MessageHandler {\r\n    constructor(side, incomingMessageBus, outgoingMessageBus, messageExecution) {\r\n        this._outgoingMessageBus = null;\r\n        this._execMessage = null;\r\n        this._side = side;\r\n        this._incomingMessageBus = incomingMessageBus;\r\n        this._outgoingMessageBus = outgoingMessageBus;\r\n        this._execMessage = messageExecution;\r\n        this._incomingMessageBus.addEventListener('message', this._handleMessage.bind(this));\r\n    }\r\n    setOutgoingMessageBus(outgoingMessageBus) {\r\n        this._outgoingMessageBus = outgoingMessageBus;\r\n    }\r\n    setMessageExecution(fun) {\r\n        this._execMessage = fun;\r\n    }\r\n    sendMessage(message, args = []) {\r\n        return new Promise((resolve, reject) => {\r\n            const messageChannel = new MessageChannel();\r\n            messageChannel.port1.onmessage = (event) => {\r\n                if (!event || !event.data) {\r\n                    messageChannel.port1.close();\r\n                    messageChannel.port2.close();\r\n                    return reject(new Error(this._side + ' received message but response can not be interpreted'));\r\n                }\r\n                let response;\r\n                try {\r\n                    response = JSON.parse(event.data);\r\n                }\r\n                catch (e) {\r\n                    messageChannel.port1.close();\r\n                    messageChannel.port2.close();\r\n                    this._prepareError(e);\r\n                    return reject(e);\r\n                }\r\n                if (response.error) {\r\n                    reject(response.error);\r\n                }\r\n                else if (response.result !== undefined) {\r\n                    resolve(response.result);\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n                messageChannel.port1.close();\r\n                messageChannel.port2.close();\r\n            };\r\n            let command = '';\r\n            try {\r\n                command = JSON.stringify({ message, args });\r\n            }\r\n            catch (e) {\r\n                return reject(new Error(this._side + ': can not create command because it is not JSON.stringify able'));\r\n            }\r\n            if (!this._outgoingMessageBus) {\r\n                return reject(new Error(this._side + ': outgoing bus not set yet'));\r\n            }\r\n            this._outgoingMessageBus.postMessage(command, '*', [messageChannel.port2]);\r\n        });\r\n    }\r\n    _handleMessage(event) {\r\n        // check if MessageEvent has a port set --> hope this clears confusion about https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging\r\n        const receiver = (event.ports && Array.isArray(event.ports) && event.ports.length > 0) ? event.ports[0] : null;\r\n        if (event.data && receiver) {\r\n            try {\r\n                const command = JSON.parse(event.data);\r\n                if (!this._execMessage) {\r\n                    return receiver.postMessage(JSON.stringify({ error: this._side + ' is not ready to handle messages' }));\r\n                }\r\n                if (!Array.isArray(command.args)) {\r\n                    command.args = [command.args];\r\n                }\r\n                const execResult = this._execMessage(command, event);\r\n                if (execResult === undefined) {\r\n                    return; // do nothing because execMessage did not know what to do. Probably a message from another iframe was intercepted\r\n                }\r\n                execResult.then((data = {}) => {\r\n                    // tslint:disable-next-line:no-unnecessary-initializer\r\n                    let error = undefined;\r\n                    // tslint:disable-next-line:no-unnecessary-initializer\r\n                    let result = undefined;\r\n                    if (typeof data === 'object' && data !== null) {\r\n                        error = data.error;\r\n                        result = data.result;\r\n                    }\r\n                    if (error) {\r\n                        receiver.postMessage(JSON.stringify({ error }));\r\n                    }\r\n                    else if (result !== undefined) {\r\n                        receiver.postMessage(JSON.stringify({ result }));\r\n                    }\r\n                    else {\r\n                        receiver.postMessage(JSON.stringify({ result: data }));\r\n                    }\r\n                }, (error) => {\r\n                    receiver.postMessage(JSON.stringify({ error: this._prepareError(error) }));\r\n                });\r\n            }\r\n            catch (error) {\r\n                receiver.postMessage(JSON.stringify({ error: this._prepareError(error) }));\r\n            }\r\n        }\r\n    }\r\n    _prepareError(e) {\r\n        if (typeof e === 'string') {\r\n            const error = this._side + ': ' + e;\r\n            console.error(error);\r\n            return error;\r\n        }\r\n        e.message = this._side + ': ' + e.message;\r\n        console.error(e);\r\n        return e.message;\r\n    }\r\n}\n\nconst NAMESPACE_SEPARATOR = '.';\r\nconst HANDSHAKE_MESSAGES = {\r\n    REQUEST_BOOT: 'requestBoot',\r\n    SETUP: 'setup',\r\n    WEBSITE_READY: 'websiteReady',\r\n};\r\nconst getConfiguratorSettings = async (configuratorId, initData) => {\r\n    if (typeof configuratorId !== 'string') {\r\n        throw new Error('Configurator ID is not a string type: \"' + (typeof configuratorId) + '\"');\r\n    }\r\n    const server = initData.customApiUrl ? initData.customApiUrl : 'https://api.roomle.com/v2';\r\n    const currentTenant = initData.overrideTenant || 9;\r\n    const url = server + '/configurators/' + configuratorId;\r\n    const apiKey = 'roomle_portal_v2';\r\n    const token = '03-' + window.btoa((new Date()).toISOString() + ';anonymous;' + apiKey);\r\n    const createHeaders = () => {\r\n        const headers = {\r\n            apiKey,\r\n            currentTenant,\r\n            locale: 'en',\r\n            language: 'en',\r\n            device: 1,\r\n            token,\r\n            platform: 'web',\r\n        };\r\n        return new Headers(headers);\r\n    };\r\n    const request = new Request(url, {\r\n        method: 'GET',\r\n        headers: createHeaders(),\r\n        mode: 'cors',\r\n        cache: 'default',\r\n    });\r\n    const response = await fetch(request);\r\n    const { configurator } = await response.json();\r\n    return configurator;\r\n};\n\nconst isInIframe = () => {\r\n    try {\r\n        return window.self !== window.top;\r\n    }\r\n    catch (e) {\r\n        return true;\r\n    }\r\n};\n\n/**\r\n * Recursively merge properties of two objects.\r\n * If a property exists in both it, property of obj2 is used.\r\n * Returns a new object (copy)\r\n * @param obj1\r\n * @param obj2\r\n */\r\nconst deepMergeCopy = (obj1, obj2) => {\r\n    const result = JSON.parse(JSON.stringify(obj1));\r\n    return deepMerge(result, obj2);\r\n};\r\n/**\r\n * Recursively merge properties of two objects.\r\n * If a property exists in both it, property of obj2 is used.\r\n * Warning: This returns obj1 and not a copy!\r\n * @param obj1\r\n * @param obj2\r\n */\r\nconst deepMerge = (obj1, obj2) => {\r\n    // tslint:disable-next-line\r\n    for (const p in obj2) {\r\n        try {\r\n            // Property in destination object set; update its value.\r\n            if (obj2[p].constructor === Object) {\r\n                obj1[p] = deepMerge(obj1[p], obj2[p]);\r\n            }\r\n            else {\r\n                obj1[p] = obj2[p];\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Property in destination object not set; create it and set its value.\r\n            obj1[p] = obj2[p];\r\n        }\r\n    }\r\n    return obj1;\r\n};\r\nconst NAMES_FOR_LOCALHOST = [\r\n    '127.0.0.1',\r\n    'localhost',\r\n    '0.0.0.0',\r\n];\r\nconst getHostname = () => {\r\n    const isIframe = isInIframe();\r\n    let url = window.location.href;\r\n    if (isIframe) {\r\n        if (!document.referrer) {\r\n            return null;\r\n        }\r\n        url = document.referrer;\r\n    }\r\n    const { hostname } = new URL(url);\r\n    return hostname;\r\n};\r\nconst isDemoHostname = (hostname) => {\r\n    if (NAMES_FOR_LOCALHOST.includes(hostname)) {\r\n        return true;\r\n    }\r\n    if (hostname.endsWith('roomle.com')) {\r\n        return true;\r\n    }\r\n    // exception for CI builds\r\n    if (hostname.endsWith('gitlab.io') || hostname.endsWith('gitlab.com')) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\n\nconst BROWSER_LANGUAGE_PROPERTY_KEYS_KNOWN = ['language', 'browserLanguage', 'userLanguage', 'systemLanguage'];\r\nconst getLanguage = (lang = null) => {\r\n    const navigator = window.navigator;\r\n    if (lang) {\r\n        return lang.substr(0, 2);\r\n    }\r\n    if (Array.isArray(navigator.languages) && navigator.languages.length > 0) {\r\n        return navigator.languages[0].substr(0, 2);\r\n    }\r\n    for (let i = 0, length = BROWSER_LANGUAGE_PROPERTY_KEYS_KNOWN.length; i < length; i++) {\r\n        const language = navigator[BROWSER_LANGUAGE_PROPERTY_KEYS_KNOWN[i]];\r\n        if (language) {\r\n            return language.substr(0, 2);\r\n        }\r\n    }\r\n    return 'en';\r\n};\n\nconst CONFIGURATOR_IDLE = '(idle)';\r\nconst castAndFixInitData = (initData) => {\r\n    castInitData(initData);\r\n    if (initData === null || initData === void 0 ? void 0 : initData.customApiUrl) {\r\n        initData.customApiUrl = decodeURIComponent(initData.customApiUrl);\r\n    }\r\n    if (initData.emails === undefined) {\r\n        initData.emails = false;\r\n    }\r\n    if (initData.shareUrl) {\r\n        initData.deeplink = initData.shareUrl.replace(LEGACY_SHARE_PLACEHOLDER, SHARE_PLACEHOLDER);\r\n    }\r\n    return initData;\r\n};\r\nconst castInitData = (obj) => {\r\n    if (!obj) {\r\n        return;\r\n    }\r\n    const keys = Object.keys(obj);\r\n    for (const key of keys) {\r\n        const value = obj[key];\r\n        // need to type-check for null because typeof null evaluates to object\r\n        // see here why this is like it is: https://2ality.com/2013/10/typeof-null.html\r\n        if (!Array.isArray(value) && typeof value === 'object' && value !== null) {\r\n            return castInitData(value);\r\n        }\r\n        if (Array.isArray(value)) {\r\n            for (const entry of value) {\r\n                castInitData(entry);\r\n            }\r\n            return;\r\n        }\r\n        if (value === 'true' || value === 'false') {\r\n            obj[key] = value === 'true';\r\n        }\r\n    }\r\n};\r\nconst mergeInitData = (configuratorSettings, currentInitData) => {\r\n    currentInitData.configuratorId = configuratorSettings.id;\r\n    const remoteInitData = configuratorSettings.settings || {};\r\n    // This is a performance optimization so we do not need to fetch\r\n    // configurator settings twice\r\n    if (!currentInitData.overrideTenant && configuratorSettings.tenant) {\r\n        // use as any because we send tenant id as string but SDK requires to send a number\r\n        // casting to number could become a problem when we change tenant IDs to something\r\n        // random instead of a integer which is incremented\r\n        currentInitData.overrideTenant = configuratorSettings.tenant;\r\n    }\r\n    return deepMergeCopy(remoteInitData, currentInitData);\r\n};\r\nconst getFallbackInitData = () => {\r\n    const fallbackInitData = {};\r\n    if (!fallbackInitData.locale) {\r\n        fallbackInitData.locale = getLanguage();\r\n    }\r\n    if (fallbackInitData.id === CONFIGURATOR_IDLE) {\r\n        delete fallbackInitData.id;\r\n    }\r\n    const hostname = getHostname();\r\n    if (hostname && isDemoHostname(hostname)) {\r\n        fallbackInitData.configuratorId = 'demoConfigurator';\r\n    }\r\n    fallbackInitData.customApiUrl = 'https://www.roomle.com/api/v2';\r\n    fallbackInitData.emails = false;\r\n    return fallbackInitData;\r\n};\r\nconst LEGACY_SHARE_PLACEHOLDER = '<CONF_ID>';\r\nconst SHARE_PLACEHOLDER = '#CONFIGURATIONID#';\n\n// see why: https://stackoverflow.com/a/58065241/10800831\r\nconst isAndroid = () => /(android)/i.test(navigator.userAgent);\n\nconst setDefaultBehaviour = (object, callbackName, defaultBehaviour) => {\r\n    let customBehaviour = null;\r\n    Object.defineProperty(object, callbackName, {\r\n        get() {\r\n            return customBehaviour || defaultBehaviour;\r\n        },\r\n        set(data) {\r\n            if (!(data === null || data === void 0 ? void 0 : data.mute)) {\r\n                console.warn('You override Roomle defined behaviour. To disalbe this warning pass in an object with the following properties');\r\n                console.warn('{ mute: true, value: () => void }');\r\n                customBehaviour = data;\r\n            }\r\n            else {\r\n                customBehaviour = data.value;\r\n            }\r\n        },\r\n    });\r\n};\r\nconst calcVh = () => (window.innerHeight * 0.01) + 'px'; // needed because of URL bar in android, inspired by: https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\r\nconst setCustomProp = (element) => {\r\n    if (!element) {\r\n        return;\r\n    }\r\n    // Needed to wait for the next run loop otherwise data is wrong\r\n    setTimeout(() => element.style.setProperty(RML_CUSTOM_PROPERTY_HEIGHT, calcVh()), 0);\r\n};\r\nconst RML_STYLES_ID = 'rml-styles';\r\nconst RML_ANIMATION_DELAY = 450;\r\nconst RML_CUSTOM_PROPERTY_HEIGHT = '--rml-full-height';\r\nconst RML_CSS_CLASSES = {\r\n    CONTAINER: 'rml-container',\r\n    FILL: 'rml-fill',\r\n    POSITION: 'rml-pos',\r\n    TRANSITION: 'rml-transition',\r\n    ANDROID_HEIGHT: 'rml-android-height',\r\n    OVERFLOW_HIDDEN: 'rml-overflow-hidden',\r\n};\r\nconst globalSetupDone = new Map();\r\nclass RoomleEmbeddingApi {\r\n    constructor(settings, container, initData, waitForIframe) {\r\n        this.ui = {\r\n            callbacks: null,\r\n        };\r\n        this.extended = {\r\n            callbacks: null,\r\n        };\r\n        this.analytics = {\r\n            callbacks: {},\r\n        };\r\n        this._initData = {};\r\n        if (!settings || typeof settings.id !== 'string') {\r\n            throw new Error('Please provide a correct configuratorId, you get the correct ID from your Roomle Contact Person');\r\n        }\r\n        if (globalSetupDone.has(container)) {\r\n            throw new Error('There is already an instance on this DOM element');\r\n        }\r\n        const stylesAlreadyAdded = !!document.getElementById(RML_STYLES_ID);\r\n        if (!stylesAlreadyAdded) {\r\n            const zIndex = initData.zIndex || 9999999;\r\n            const styles = document.createElement('style');\r\n            styles.type = 'text/css';\r\n            styles.id = RML_STYLES_ID;\r\n            const cssTransition = 'transition:all ease-in-out ' + RML_ANIMATION_DELAY + 'ms;';\r\n            const cssTransitionForAllBrowsers = ['-webkit-', '-o-'].reduce((acc, browser) => acc += browser + cssTransition, '') + cssTransition;\r\n            const vh = calcVh();\r\n            styles.innerHTML = `\n        .${RML_CSS_CLASSES.CONTAINER}{${RML_CUSTOM_PROPERTY_HEIGHT}:${vh};}\n        .${RML_CSS_CLASSES.POSITION}{position:fixed;top:0;left:0;z-index:${zIndex};opacity:0}\n        .${RML_CSS_CLASSES.TRANSITION}{${cssTransitionForAllBrowsers}}\n        .${RML_CSS_CLASSES.FILL}{width:100%;height:100%;opacity:1}\n        .${RML_CSS_CLASSES.ANDROID_HEIGHT}{height:calc(var(${RML_CUSTOM_PROPERTY_HEIGHT},1vh)*100)}\n        .${RML_CSS_CLASSES.OVERFLOW_HIDDEN}{overflow:hidden}\n      `;\r\n            document.head.appendChild(styles);\r\n        }\r\n        this._onResize = this._onResize.bind(this);\r\n        if (isAndroid()) {\r\n            window.addEventListener('resize', this._onResize);\r\n        }\r\n        this._container = container;\r\n        this._initData = initData;\r\n        this._configuratorSettings = settings;\r\n        const iframe = this._createIframe();\r\n        this._onUseFullPage = this._onUseFullPage.bind(this);\r\n        this._executeMessage = this._executeMessage.bind(this);\r\n        this._onBackToWebsite = this._onBackToWebsite.bind(this);\r\n        this._messageHandler = new MessageHandler('website', window, null, this._executeMessage);\r\n        this._waitForIframe = waitForIframe;\r\n        this._container.appendChild(iframe);\r\n        this._iframe = iframe;\r\n        globalSetupDone.set(container, true);\r\n    }\r\n    static createPlanner(configuratorId, container, initData) {\r\n        return this._create(configuratorId, container, initData);\r\n    }\r\n    /**\r\n     * Method to create a new instance of a Roomle Configurator\r\n     * @param configuratorId the id which identifies your configurator, you will get this ID from your Roomle Contact Person\r\n     * @param container DOM container in which the configurator should be placed\r\n     * @param initData settings with which the configurator should be started\r\n     */\r\n    static createConfigurator(configuratorId, container, initData) {\r\n        return this._create(configuratorId, container, initData);\r\n    }\r\n    /**\r\n     * Method to create a new instance of a Roomle Configurator\r\n     * @deprecated please use \"createConfigurator\"\r\n     * @param configuratorId the id which identifies your configurator, you will get this ID from your Roomle Contact Person\r\n     * @param container DOM container in which the configurator should be placed\r\n     * @param initData settings with which the configurator should be started\r\n     */\r\n    static create(configuratorId, container, initData) {\r\n        return this._create(configuratorId, container, initData);\r\n    }\r\n    /**\r\n     * Method to create a new instance of a Roomle Viewer\r\n     * @param configuratorId the id which identifies your configurator, you will get this ID from your Roomle Contact Person\r\n     * @param container DOM container in which the configurator should be placed\r\n     * @param initData settings with which the configurator should be started\r\n     */\r\n    static createViewer(configuratorId, container, initData) {\r\n        return this._create(configuratorId, container, initData);\r\n    }\r\n    static _create(configuratorId, container, initData) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const fallbackInitData = deepMerge(getFallbackInitData(), castAndFixInitData(initData));\r\n                if (!fallbackInitData.featureFlags) {\r\n                    fallbackInitData.featureFlags = {};\r\n                }\r\n                if (!fallbackInitData.featureFlags.realPartList) {\r\n                    fallbackInitData.featureFlags.realPartList = true;\r\n                }\r\n                const configuratorSettings = await getConfiguratorSettings(configuratorId, fallbackInitData);\r\n                initData = mergeInitData(configuratorSettings, fallbackInitData);\r\n                return new this(configuratorSettings, container, initData, resolve);\r\n            }\r\n            catch (e) {\r\n                return reject(e);\r\n            }\r\n        });\r\n    }\r\n    teardown() {\r\n        if (this._container) {\r\n            globalSetupDone.delete(this._container);\r\n        }\r\n        const iframe = this._container.querySelector('iframe');\r\n        if (iframe) {\r\n            this._container.removeChild(iframe);\r\n        }\r\n        window.removeEventListener('resize', this._onResize);\r\n    }\r\n    _createIframe() {\r\n        var _a;\r\n        const iframe = document.createElement('iframe');\r\n        let url = ((_a = this._configuratorSettings) === null || _a === void 0 ? void 0 : _a.url) || 'https://www.roomle.com/t/cp/';\r\n        if (this._initData.useLocalRoomle) {\r\n            url = location.href.replace('embedding.html', '');\r\n        }\r\n        if (location.href.includes('roomle.gitlab.io')) {\r\n            url = location.href.replace('embedding.html', 'index.html');\r\n        }\r\n        if (this._initData.overrideServerUrl) {\r\n            url = this._initData.overrideServerUrl;\r\n        }\r\n        iframe.src = url;\r\n        iframe.classList.add(RML_CSS_CLASSES.CONTAINER);\r\n        iframe.classList.add(RML_CSS_CLASSES.FILL);\r\n        return iframe;\r\n    }\r\n    _onResize() {\r\n        setCustomProp(this._iframe);\r\n    }\r\n    _onUseFullPage() {\r\n        this._iframe.classList.add(RML_CSS_CLASSES.POSITION);\r\n        document.documentElement.classList.add(RML_CSS_CLASSES.OVERFLOW_HIDDEN);\r\n        window.document.body.classList.add(RML_CSS_CLASSES.OVERFLOW_HIDDEN);\r\n        if (isAndroid()) {\r\n            setCustomProp(this._iframe);\r\n            this._iframe.classList.add(RML_CSS_CLASSES.ANDROID_HEIGHT);\r\n        }\r\n    }\r\n    _onBackToWebsite() {\r\n        this._iframe.classList.remove(RML_CSS_CLASSES.POSITION);\r\n        this._iframe.classList.remove(RML_CSS_CLASSES.ANDROID_HEIGHT);\r\n        document.documentElement.classList.remove(RML_CSS_CLASSES.OVERFLOW_HIDDEN);\r\n        window.document.body.classList.remove(RML_CSS_CLASSES.OVERFLOW_HIDDEN);\r\n    }\r\n    _executeMessage({ message, args }, event) {\r\n        var _a;\r\n        if (!event.source) {\r\n            // @ts-ignore\r\n            return; // no source? just wait ;-)\r\n        }\r\n        if (event.source !== ((_a = this._iframe) === null || _a === void 0 ? void 0 : _a.contentWindow)) {\r\n            // @ts-ignore\r\n            return; // need to wait since response is not for the current iframe;\r\n        }\r\n        if (message === HANDSHAKE_MESSAGES.REQUEST_BOOT) {\r\n            this._messageHandler.setOutgoingMessageBus(event.source);\r\n            return Promise.resolve({ result: this._initData });\r\n        }\r\n        if (message === HANDSHAKE_MESSAGES.SETUP) {\r\n            const { methods, callbacks } = args[0];\r\n            methods.forEach((method) => {\r\n                const namespaces = method.split(NAMESPACE_SEPARATOR);\r\n                const object = namespaces[0];\r\n                const methodName = namespaces[1];\r\n                this[object][methodName] = function () {\r\n                    // @todo -- this was the fix that values are passed to caller, e.g.: interface.extended.getParametersOfRootComponent\r\n                    // most of the things we need for a meaningful test are not available in JEST (since it runs in node). We should\r\n                    // write a Cypress test for it\r\n                    return this._messageHandler.sendMessage(method, [...arguments]);\r\n                }.bind(this);\r\n            });\r\n            callbacks.forEach((callback) => {\r\n                const namespaces = callback.split(NAMESPACE_SEPARATOR);\r\n                const object = namespaces[0];\r\n                const callbacksName = namespaces[1];\r\n                const eventName = namespaces[2];\r\n                if (!this[object][callbacksName]) {\r\n                    this[object][callbacksName] = {};\r\n                }\r\n                // @ts-ignore\r\n                this[object][callbacksName][eventName] = () => undefined;\r\n            });\r\n            setDefaultBehaviour(this.ui.callbacks, 'onUseFullPage', this._onUseFullPage);\r\n            setDefaultBehaviour(this.ui.callbacks, 'onBackToWebsite', this._onBackToWebsite);\r\n            this._waitForIframe(this);\r\n            setTimeout(() => this._messageHandler.sendMessage(HANDSHAKE_MESSAGES.WEBSITE_READY), 0); // Run it after the promise is resolved so everyone can subscribe\r\n            return Promise.resolve({ result: null });\r\n        }\r\n        const messageNamespaces = message.split(NAMESPACE_SEPARATOR);\r\n        const namespace = messageNamespaces[0];\r\n        const objectOfAction = messageNamespaces[1];\r\n        const methodOfAction = (messageNamespaces.length === 3) ? messageNamespaces[2] : null;\r\n        if (methodOfAction) {\r\n            if (this[namespace][objectOfAction][methodOfAction]) {\r\n                this[namespace][objectOfAction][methodOfAction](...args);\r\n                return Promise.resolve({ result: null });\r\n            }\r\n        }\r\n        return Promise.reject('Message \"' + message + '\" is unkown');\r\n    }\r\n}\n\nexport default RoomleEmbeddingApi;\n"],"sourceRoot":""}